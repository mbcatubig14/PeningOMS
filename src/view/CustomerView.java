/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import dao.CustomerDAO;
import java.awt.Color;
import javax.swing.table.DefaultTableModel;
import model.Customer;
import model.Person;

/**
 *
 * @author Muhammad
 */
public class CustomerView extends javax.swing.JPanel {

    private CustomerDAO customerDao;

    /**
     * Creates new form CustomerView
     */
    public CustomerView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderBtnGroup = new javax.swing.ButtonGroup();
        formPanel = new javax.swing.JPanel();
        firstNameLabel = new javax.swing.JLabel();
        firstNameField = new javax.swing.JTextField();
        lastNameField = new javax.swing.JTextField();
        lastNameLabel = new javax.swing.JLabel();
        addressField = new javax.swing.JTextField();
        addressLabel = new javax.swing.JLabel();
        postCodeLabel = new javax.swing.JLabel();
        contactNoLabel = new javax.swing.JLabel();
        contactNoField = new javax.swing.JFormattedTextField();
        maleRadioButton = new javax.swing.JRadioButton();
        femaleRadioButton = new javax.swing.JRadioButton();
        genderLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        modifyButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        postCodeField = new javax.swing.JTextField();
        errorLabel = new javax.swing.JLabel();
        customersTablePanel = new javax.swing.JPanel();
        customersTableScrollPane = new javax.swing.JScrollPane();
        customersTable = new javax.swing.JTable();

        setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        firstNameLabel.setLabelFor(firstNameField);
        firstNameLabel.setText("First name:");

        lastNameLabel.setLabelFor(lastNameField);
        lastNameLabel.setText("Last name:");

        addressLabel.setLabelFor(addressField);
        addressLabel.setText("Address:");

        postCodeLabel.setLabelFor(postCodeField);
        postCodeLabel.setText("Post code:");

        contactNoLabel.setLabelFor(contactNoField);
        contactNoLabel.setText("Contact number:");

        try {
            contactNoField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###-####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        genderBtnGroup.add(maleRadioButton);
        maleRadioButton.setText("Male");
        maleRadioButton.setActionCommand("Male");

        genderBtnGroup.add(femaleRadioButton);
        femaleRadioButton.setText("Female");
        femaleRadioButton.setActionCommand("Female");

        genderLabel.setText("Gender:");

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        modifyButton.setText("Modify");
        modifyButton.setEnabled(false);
        modifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.setEnabled(false);
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout formPanelLayout = new javax.swing.GroupLayout(formPanel);
        formPanel.setLayout(formPanelLayout);
        formPanelLayout.setHorizontalGroup(
            formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(formPanelLayout.createSequentialGroup()
                            .addComponent(firstNameLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(formPanelLayout.createSequentialGroup()
                            .addComponent(addressLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(addressField))
                        .addGroup(formPanelLayout.createSequentialGroup()
                            .addComponent(contactNoLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(contactNoField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(formPanelLayout.createSequentialGroup()
                            .addComponent(genderLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(maleRadioButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(femaleRadioButton))
                        .addGroup(formPanelLayout.createSequentialGroup()
                            .addComponent(postCodeLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(postCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(formPanelLayout.createSequentialGroup()
                            .addComponent(lastNameLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(formPanelLayout.createSequentialGroup()
                            .addComponent(addButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(modifyButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(removeButton)))
                    .addComponent(errorLabel))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        formPanelLayout.setVerticalGroup(
            formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameLabel)
                    .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNameLabel)
                    .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addressLabel)
                    .addComponent(addressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(postCodeLabel)
                    .addComponent(postCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contactNoLabel)
                    .addComponent(contactNoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genderLabel)
                    .addComponent(femaleRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(maleRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(errorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(modifyButton)
                    .addComponent(removeButton))
                .addContainerGap())
        );

        String[] tableHeadings = new String [] {
            "ID", "First name", "Last name", "Address", "Post code", "Contact No.", "Gender"
        };
        customersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object[][]{},tableHeadings
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }

        });
        populateTableData();
        customersTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        customersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customersTableMouseClicked(evt);
            }
        });
        customersTableScrollPane.setViewportView(customersTable);
        customersTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout customersTablePanelLayout = new javax.swing.GroupLayout(customersTablePanel);
        customersTablePanel.setLayout(customersTablePanelLayout);
        customersTablePanelLayout.setHorizontalGroup(
            customersTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customersTablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(customersTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE)
                .addContainerGap())
        );
        customersTablePanelLayout.setVerticalGroup(
            customersTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customersTablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(customersTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(formPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(customersTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customersTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(formPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed

        //Initialise Customer data access object
        customerDao = new CustomerDAO();

        //Check for gender radio button selection
        String gender = "";
        if (genderBtnGroup.getSelection() != null) {
            gender = genderBtnGroup.getSelection().getActionCommand();
        } else {
            System.out.println("error");
        }

        //Get data from the form fields
        String firstName = firstNameField.getText(),
                lastName = lastNameField.getText(),
                address = addressField.getText(),
                postCode = postCodeField.getText(),
                contactNo = contactNoField.getText();

        //Remove hyphens and trim for checks
        String newContactNo = contactNo.replaceAll("-", "").trim();

        if (isValid(firstName, lastName, address, newContactNo, gender, postCode)) {
            customerDao.insertPerson(new Customer(firstName, lastName, address, postCode, newContactNo, gender));
            updateTable();
            clearFields();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void customersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customersTableMouseClicked
        int selectedRow = customersTable.getSelectedRow();

        DefaultTableModel customersTableModel = (DefaultTableModel) customersTable.getModel();

        if (selectedRow >= 0) {

            firstNameField.setText(customersTableModel.getValueAt(selectedRow, 1).toString());
            lastNameField.setText(customersTableModel.getValueAt(selectedRow, 2).toString());
            addressField.setText(customersTableModel.getValueAt(selectedRow, 3).toString());
            postCodeField.setText(customersTableModel.getValueAt(selectedRow, 4).toString());
            contactNoField.setText(customersTableModel.getValueAt(selectedRow, 5).toString());

            if (customersTableModel.getValueAt(selectedRow, 6).toString().equals("Male")) {
                maleRadioButton.setSelected(true);
            } else {
                femaleRadioButton.setSelected(true);
            }
            modifyButton.setEnabled(true);
            removeButton.setEnabled(true);
            addButton.setEnabled(false);
        } else {
            clearFields();
            modifyButton.setEnabled(false);
            removeButton.setEnabled(false);
            addButton.setEnabled(true);
        }
    }//GEN-LAST:event_customersTableMouseClicked

    private void modifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyButtonActionPerformed
        //Initialise Customer data access object
        customerDao = new CustomerDAO();

        //Check for gender radio button selection
        String gender = "";
        if (genderBtnGroup.getSelection() != null) {
            gender = genderBtnGroup.getSelection().getActionCommand();
        } else {
            System.out.println("error");
        }

        //Get data from the form fields
        String firstName = firstNameField.getText(),
                lastName = lastNameField.getText(),
                address = addressField.getText(),
                postCode = postCodeField.getText(),
                contactNo = contactNoField.getText();

        //Remove hyphens and trim for checks
        String newContactNo = contactNo.replaceAll("-", "").trim();

        //get id of the selected row
        int selectedRow = customersTable.getSelectedRow();
        int customerId = Integer.parseInt(customersTable.getValueAt(selectedRow, 0).toString());

        //Check if valid
        if (isValid(firstName, lastName, address, newContactNo, gender, postCode)) {
            customerDao.updatePersonById(customerId, new Customer(firstName, lastName, address, postCode, newContactNo, gender));
            updateTable();
            clearFields();
        }
    }//GEN-LAST:event_modifyButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        //get id of the selected row
        int selectedRow = customersTable.getSelectedRow();
        int customerId = Integer.parseInt(customersTable.getValueAt(selectedRow, 0).toString());

        customerDao.deletePersonById(customerId);
        updateTable();
        clearFields();
    }//GEN-LAST:event_removeButtonActionPerformed

    //Checking for invalid values
    private boolean isValid(String firstName, String lastName, String address, String newContactNo, String gender, String postCode) {

        //Check for emptiness and for null values on each Strings
        if ((firstName.isEmpty() || firstName == null) && (lastName.isEmpty() || lastName == null)
                && (address.isEmpty() || address == null) && (newContactNo.isEmpty() || newContactNo == null)
                && (gender.isEmpty() || gender == null) && (postCode.isEmpty() || postCode == null)) {

            //Show error message in errorLabel
            errorLabel.setText("One of the fields are empty...");
            errorLabel.setForeground(Color.red);

            return false;
        }
        return true;
    }

    //Clear all fields
    private void clearFields() {
        firstNameField.setText("");
        lastNameField.setText("");
        addressField.setText("");
        postCodeField.setText("");
        contactNoField.setText("");
        genderBtnGroup.clearSelection();

    }

    //Populate table with customer data
    private void populateTableData() {

        //Initialise Customer data access object
        customerDao = new CustomerDAO();

        //Get TableModel
        DefaultTableModel customersTableModel = (DefaultTableModel) customersTable.getModel();

        //Get list of customers        
        for (Person customerData : customerDao.getPersons()) {

            //Get customer data
            int customerId = customerData.getId();
            String firstName = customerData.getFirstName(), lastName = customerData.getLastName(),
                    address = customerData.getFirstLineAddress(), postCode = customerData.getPostcode(),
                    contactNo = customerData.getContactNumber(), gender = customerData.getGender();

            //Add into array of objects
            Object[] customersTableData = {customerId, firstName, lastName, address, postCode, contactNo, gender};

            //Add customersTableData to the table.
            customersTableModel.addRow(customersTableData);
        }

    }

    //Repopulate data
    private void updateTable() {
        //Get TableModel
        DefaultTableModel customersTableModel = (DefaultTableModel) customersTable.getModel();

        //Remove all rows
        for (int row = customersTableModel.getRowCount() - 1; row >= 0; row--) {
            customersTableModel.removeRow(row);
        }

        //Populate again
        populateTableData();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField addressField;
    private javax.swing.JLabel addressLabel;
    private javax.swing.JFormattedTextField contactNoField;
    private javax.swing.JLabel contactNoLabel;
    private javax.swing.JTable customersTable;
    private javax.swing.JPanel customersTablePanel;
    private javax.swing.JScrollPane customersTableScrollPane;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JRadioButton femaleRadioButton;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JPanel formPanel;
    private javax.swing.ButtonGroup genderBtnGroup;
    private javax.swing.JLabel genderLabel;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JRadioButton maleRadioButton;
    private javax.swing.JButton modifyButton;
    private javax.swing.JTextField postCodeField;
    private javax.swing.JLabel postCodeLabel;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables

}
