/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import dao.ProductDAO;
import dao.SupplierDAO;
import java.math.BigDecimal;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Product;
import model.Supplier;

/**
 *
 * @author Muhammad
 */
public class ProductSupplierView extends javax.swing.JPanel {

    private ProductDAO productDao;
    private SupplierDAO supplierDao;

    /**
     * Creates new form ProductView
     */
    public ProductSupplierView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        productTypeGroup = new javax.swing.ButtonGroup();
        formPanel = new javax.swing.JPanel();
        productNameLabel = new javax.swing.JLabel();
        productNameField = new javax.swing.JTextField();
        productTypeLabel = new javax.swing.JLabel();
        fullRadioButton = new javax.swing.JRadioButton();
        rawRadioButton = new javax.swing.JRadioButton();
        noOfStocksLabel = new javax.swing.JLabel();
        noOfStocksField = new javax.swing.JFormattedTextField();
        unitPriceLabel = new javax.swing.JLabel();
        unitPriceField = new javax.swing.JFormattedTextField();
        packTypeLabel = new javax.swing.JLabel();
        packTypeComboBox = new javax.swing.JComboBox<>();
        supplierComboBox = new javax.swing.JComboBox<>();
        productSupplierNameLabel = new javax.swing.JLabel();
        addProductButton = new javax.swing.JButton();
        modifyProductButton = new javax.swing.JButton();
        removeProductButton = new javax.swing.JButton();
        supplierNameLabel = new javax.swing.JLabel();
        supplierNameField = new javax.swing.JTextField();
        addressLabel = new javax.swing.JLabel();
        addressField = new javax.swing.JTextField();
        contactNameLabel = new javax.swing.JLabel();
        contactNameField = new javax.swing.JTextField();
        contactNoLabel = new javax.swing.JLabel();
        contactNumberField = new javax.swing.JFormattedTextField();
        addSupplierButton = new javax.swing.JButton();
        modifySupplierButton = new javax.swing.JButton();
        removeSupplierButton = new javax.swing.JButton();
        tablesPanel = new javax.swing.JPanel();
        productsTableScrollPane = new javax.swing.JScrollPane();
        productsTable = new javax.swing.JTable();
        supplierTableScrollPane = new javax.swing.JScrollPane();
        supplierTable = new javax.swing.JTable();

        productNameLabel.setText("Product Name:");

        productTypeLabel.setText("Product Type:");

        productTypeGroup.add(fullRadioButton);
        fullRadioButton.setText("Full");
        fullRadioButton.setActionCommand("Full");

        productTypeGroup.add(rawRadioButton);
        rawRadioButton.setText("Raw");
        rawRadioButton.setActionCommand("Raw");

        noOfStocksLabel.setText("# of Stocks:");

        noOfStocksField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###"))));

        unitPriceLabel.setText("Unit Price:");

        unitPriceField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getCurrencyInstance())));

        packTypeLabel.setText("Packaging Type:");

        packTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a pack type...", "Box(es)", "Piece(s)", "Pack(s)", "Tray(s)", "Bag(s)", "Portion(s)" }));

        supplierComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a supplier..." }));
        populateSupplierComboBoxData();

        productSupplierNameLabel.setText("Supplier:");

        addProductButton.setText("Add");
        addProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProductButtonActionPerformed(evt);
            }
        });

        modifyProductButton.setText("Modify");
        modifyProductButton.setEnabled(false);
        modifyProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyProductButtonActionPerformed(evt);
            }
        });

        removeProductButton.setText("Remove");
        removeProductButton.setEnabled(false);
        removeProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeProductButtonActionPerformed(evt);
            }
        });

        supplierNameLabel.setText("Supplier Name:");

        addressLabel.setText("Address:");

        contactNameLabel.setText("Contact name:");

        contactNoLabel.setText("Contact #:");

        try {
            contactNumberField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###-####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        addSupplierButton.setText("Add");
        addSupplierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSupplierButtonActionPerformed(evt);
            }
        });

        modifySupplierButton.setText("Modify");
        modifySupplierButton.setEnabled(false);
        modifySupplierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifySupplierButtonActionPerformed(evt);
            }
        });

        removeSupplierButton.setText("Remove");
        removeSupplierButton.setEnabled(false);
        removeSupplierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSupplierButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout formPanelLayout = new javax.swing.GroupLayout(formPanel);
        formPanel.setLayout(formPanelLayout);
        formPanelLayout.setHorizontalGroup(
            formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formPanelLayout.createSequentialGroup()
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(formPanelLayout.createSequentialGroup()
                        .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(productNameLabel)
                            .addComponent(productTypeLabel)
                            .addComponent(noOfStocksLabel)
                            .addComponent(unitPriceLabel)
                            .addComponent(packTypeLabel)
                            .addComponent(productSupplierNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(formPanelLayout.createSequentialGroup()
                                .addComponent(fullRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rawRadioButton))
                            .addComponent(productNameField)
                            .addComponent(unitPriceField)
                            .addComponent(noOfStocksField, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(packTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(supplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(formPanelLayout.createSequentialGroup()
                        .addComponent(addProductButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modifyProductButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeProductButton))
                    .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(formPanelLayout.createSequentialGroup()
                            .addComponent(contactNoLabel)
                            .addGap(41, 41, 41)
                            .addComponent(contactNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(formPanelLayout.createSequentialGroup()
                            .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(supplierNameLabel)
                                .addComponent(addressLabel)
                                .addComponent(contactNameLabel))
                            .addGap(12, 12, 12)
                            .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(contactNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(supplierNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(addressField, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(formPanelLayout.createSequentialGroup()
                            .addComponent(addSupplierButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(modifySupplierButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(removeSupplierButton)
                            .addGap(41, 41, 41))))
                .addGap(0, 12, Short.MAX_VALUE))
        );
        formPanelLayout.setVerticalGroup(
            formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productNameLabel)
                    .addComponent(productNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productTypeLabel)
                    .addComponent(fullRadioButton)
                    .addComponent(rawRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noOfStocksLabel)
                    .addComponent(noOfStocksField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unitPriceLabel)
                    .addComponent(unitPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(packTypeLabel)
                    .addComponent(packTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(supplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productSupplierNameLabel))
                .addGap(18, 18, 18)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addProductButton)
                    .addComponent(modifyProductButton)
                    .addComponent(removeProductButton))
                .addGap(18, 18, 18)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(supplierNameLabel)
                    .addComponent(supplierNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addressLabel)
                    .addComponent(addressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contactNameLabel)
                    .addComponent(contactNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contactNoLabel)
                    .addComponent(contactNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addSupplierButton)
                    .addComponent(modifySupplierButton)
                    .addComponent(removeSupplierButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        productsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Type", "# of Stocks", "Unit price", "Pack type", "Supplier"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        populateProductTableData();
        productsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        productsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productsTableMouseClicked(evt);
            }
        });
        productsTableScrollPane.setViewportView(productsTable);
        productsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (productsTable.getColumnModel().getColumnCount() > 0) {
            productsTable.getColumnModel().getColumn(0).setResizable(false);
            productsTable.getColumnModel().getColumn(0).setPreferredWidth(15);
        }

        supplierTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Supplier Name", "Address", "Contact Name", "Contact #"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        populateSupplierTableData();
        supplierTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                supplierTableMouseClicked(evt);
            }
        });
        supplierTableScrollPane.setViewportView(supplierTable);
        supplierTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (supplierTable.getColumnModel().getColumnCount() > 0) {
            supplierTable.getColumnModel().getColumn(0).setResizable(false);
            supplierTable.getColumnModel().getColumn(0).setPreferredWidth(15);
        }

        javax.swing.GroupLayout tablesPanelLayout = new javax.swing.GroupLayout(tablesPanel);
        tablesPanel.setLayout(tablesPanelLayout);
        tablesPanelLayout.setHorizontalGroup(
            tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(supplierTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                    .addComponent(productsTableScrollPane))
                .addContainerGap())
        );
        tablesPanelLayout.setVerticalGroup(
            tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(productsTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(supplierTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(formPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tablesPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(formPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProductButtonActionPerformed
        //Initialise Product data access object
        productDao = new ProductDAO();
        supplierDao = new SupplierDAO();

        //Check for gender radio button selection
        String productType = "";
        if (productTypeGroup.getSelection() != null) {
            productType = productTypeGroup.getSelection().getActionCommand();
        } else {
            System.out.println("error");
        }

        String productName = productNameField.getText(), packagingType = packTypeComboBox.getSelectedItem().toString(), supplierName = supplierComboBox.getSelectedItem().toString();
        Integer numberOfStocks = Integer.parseInt(noOfStocksField.getText());
        Double unitPriceInDouble = Double.parseDouble(unitPriceField.getText());
        BigDecimal pricePerUnit = new BigDecimal(unitPriceInDouble);

        if (isValid(productName, productType, numberOfStocks, pricePerUnit, packagingType, supplierName)) {
            Product product = new Product(productName, productType, numberOfStocks, pricePerUnit, packagingType);
            product.setSuppliers(supplierDao.getSupplierByName(supplierName));
            productDao.addProduct(product);
            updateProductTable();
            clearFieldsForProductForm();
        }
    }//GEN-LAST:event_addProductButtonActionPerformed

    private void productsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productsTableMouseClicked
        int selectedRow = productsTable.getSelectedRow();

        DefaultTableModel productsTableModel = (DefaultTableModel) productsTable.getModel();

        if (selectedRow >= 0) {
            productNameField.setText(productsTableModel.getValueAt(selectedRow, 1).toString());
            if (productsTableModel.getValueAt(selectedRow, 2).toString().equals("Full")) {
                fullRadioButton.setSelected(true);
            } else {
                rawRadioButton.setSelected(true);
            }
            noOfStocksField.setText(productsTableModel.getValueAt(selectedRow, 3).toString());
            unitPriceField.setText(productsTableModel.getValueAt(selectedRow, 4).toString());

            switch (productsTableModel.getValueAt(selectedRow, 5).toString().trim()) {
                case "Box(es)":
                    packTypeComboBox.setSelectedItem("Box(es)");
                    break;
                case "Piece(s)":
                    packTypeComboBox.setSelectedItem("Piece(s)");
                    break;
                case "Pack(s)":
                    packTypeComboBox.setSelectedItem("Pack(s)");
                    break;
                case "Tray(s)":
                    packTypeComboBox.setSelectedItem("Tray(s)");
                    break;
                case "Bag(s)":
                    packTypeComboBox.setSelectedItem("Bag(s)");
                    break;
                case "Portion(s)":
                    packTypeComboBox.setSelectedItem("Portion(s)");
                    break;
            }

            for (Supplier supplier : supplierDao.getSuppliers()) {
                String supplierName = supplier.getSupplierName();
                if (productsTableModel.getValueAt(selectedRow, 6).toString().equals(supplierName)) {
                    supplierComboBox.setSelectedItem(supplierName);
                }
            }

            modifyProductButton.setEnabled(true);
            removeProductButton.setEnabled(true);
            addProductButton.setEnabled(false);
        } else {
            clearFieldsForProductForm();
            modifyProductButton.setEnabled(false);
            removeProductButton.setEnabled(false);
            addProductButton.setEnabled(true);
        }
    }//GEN-LAST:event_productsTableMouseClicked

    private void modifyProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyProductButtonActionPerformed
        //Initialise Product data access object
        productDao = new ProductDAO();
        supplierDao = new SupplierDAO();

        //Check for gender radio button selection
        String productType = "";
        if (productTypeGroup.getSelection() != null) {
            productType = productTypeGroup.getSelection().getActionCommand();
        } else {
            System.out.println("error");
        }

        String productName = productNameField.getText(), packagingType = packTypeComboBox.getSelectedItem().toString(), supplierName = supplierComboBox.getSelectedItem().toString();
        Integer numberOfStocks = Integer.parseInt(noOfStocksField.getText());
        Double unitPriceInDouble = Double.parseDouble(unitPriceField.getText());
        BigDecimal pricePerUnit = new BigDecimal(unitPriceInDouble);

        //get id of the selected row
        int selectedRow = productsTable.getSelectedRow();
        int productId = Integer.parseInt(productsTable.getValueAt(selectedRow, 0).toString());

        if (isValid(productName, productType, numberOfStocks, pricePerUnit, packagingType, supplierName)) {
            Product product = new Product(productName, productType, numberOfStocks, pricePerUnit, packagingType);
            product.setSuppliers(supplierDao.getSupplierByName(supplierName));
            productDao.updateProduct(productId, product);
            updateProductTable();
            clearFieldsForProductForm();
        }
    }//GEN-LAST:event_modifyProductButtonActionPerformed

    private void removeProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeProductButtonActionPerformed
        //get id of the selected row
        int selectedRow = productsTable.getSelectedRow();
        int productId = Integer.parseInt(productsTable.getValueAt(selectedRow, 0).toString());
        productDao.deleteProduct(productId);
        updateProductTable();
        clearFieldsForProductForm();
    }//GEN-LAST:event_removeProductButtonActionPerformed

    private void supplierTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_supplierTableMouseClicked
        int selectedRow = supplierTable.getSelectedRow();

        DefaultTableModel supplierTableModel = (DefaultTableModel) supplierTable.getModel();

        if (selectedRow >= 0) {
            supplierNameField.setText(supplierTableModel.getValueAt(selectedRow, 1).toString());
            addressField.setText(supplierTableModel.getValueAt(selectedRow, 2).toString());
            contactNameField.setText(supplierTableModel.getValueAt(selectedRow, 3).toString());
            contactNumberField.setText(supplierTableModel.getValueAt(selectedRow, 4).toString());

            modifySupplierButton.setEnabled(true);
            removeSupplierButton.setEnabled(true);
            addSupplierButton.setEnabled(false);
        } else {
            clearFieldsForSupplierForm();
            modifySupplierButton.setEnabled(false);
            removeSupplierButton.setEnabled(false);
            addSupplierButton.setEnabled(true);
        }
    }//GEN-LAST:event_supplierTableMouseClicked

    private void addSupplierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSupplierButtonActionPerformed
        //Initialise supplier data access object
        supplierDao = new SupplierDAO();

        String supplierName = supplierNameField.getText(), supplierAddress = addressField.getText(), contactName = contactNameField.getText(), contactNo = contactNumberField.getText();

        //Remove hyphens and trim for checks
        String newContactNo = contactNo.replaceAll("-", "").trim();

        if (isValid(supplierName, supplierAddress, contactName, contactNo)) {
            supplierDao.insertSupplier(new Supplier(supplierName, supplierAddress, contactName, newContactNo));
            updateSupplierComboBox();
            updateSupplierTable();
            clearFieldsForSupplierForm();
        }
    }//GEN-LAST:event_addSupplierButtonActionPerformed

    private void modifySupplierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifySupplierButtonActionPerformed
        //Initialise supplier data access object
        supplierDao = new SupplierDAO();

        String supplierName = supplierNameField.getText(), supplierAddress = addressField.getText(), contactName = contactNameField.getText(), contactNo = contactNumberField.getText();

        //get id of the selected row
        int selectedRow = supplierTable.getSelectedRow();
        int supplierId = Integer.parseInt(supplierTable.getValueAt(selectedRow, 0).toString());

        //Remove hyphens and trim for checks
        String newContactNo = contactNo.replaceAll("-", "").trim();

        if (isValid(supplierName, supplierAddress, contactName, contactNo)) {
            supplierDao.updateSupplier(supplierId, new Supplier(supplierName, supplierAddress, contactName, newContactNo));
            updateSupplierComboBox();
            updateSupplierTable();
            clearFieldsForSupplierForm();
        }
    }//GEN-LAST:event_modifySupplierButtonActionPerformed

    private void removeSupplierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSupplierButtonActionPerformed
        //Initialise supplier data access object
        supplierDao = new SupplierDAO();

        //get id of the selected row
        int selectedRow = supplierTable.getSelectedRow();
        int supplierId = Integer.parseInt(supplierTable.getValueAt(selectedRow, 0).toString());

        supplierDao.deleteSupplier(supplierId);
        updateSupplierComboBox();
        updateSupplierTable();
        clearFieldsForSupplierForm();

    }//GEN-LAST:event_removeSupplierButtonActionPerformed

    //Clears the fields for supplier form
    private void clearFieldsForSupplierForm() {
        supplierNameField.setText("");
        addressField.setText("");
        contactNameField.setText("");
        contactNumberField.setText("");
    }

    //Checking for invalid values
    private boolean isValid(String productName, String productType, Integer numberOfStocks, BigDecimal pricePerUnit, String packagingType, String supplierName) {

        //Check for emptiness and for null values on each Strings
        if (productName.isEmpty() && productType.isEmpty() && (numberOfStocks == 0 || numberOfStocks == null) && pricePerUnit == null && packagingType.isEmpty() && supplierName.isEmpty()) {

            //Show error message in errorLabel
            JOptionPane.showMessageDialog(this, "One of the fields are empty.", "Empty Fields", JOptionPane.ERROR_MESSAGE);

            return false;
        }
        return true;
    }

    //Clear all fields
    private void clearFieldsForProductForm() {
        productNameField.setText("");
        productTypeGroup.clearSelection();
        supplierComboBox.setSelectedIndex(0);
        unitPriceField.setText("");
        noOfStocksField.setText("");
        packTypeComboBox.setSelectedIndex(0);
    }

    //Populate table with product data
    private void populateProductTableData() {

        //Initialise Product data access object
        productDao = new ProductDAO();

        //Get TableModel
        DefaultTableModel productsTableModel = (DefaultTableModel) productsTable.getModel();

        //Get list of products        
        for (Product productData : productDao.getProducts()) {

            //Get product data
            int productId = productData.getProductId(),
                    noOfStocks = productData.getNumberOfStocks();
            String productName = productData.getProductName(),
                    productType = productData.getProductType(),
                    packagingType = productData.getPackagingType();

            BigDecimal unitPrice = productData.getPricePerUnit();

            String supplierName = productData.getSuppliers().getSupplierName();

            //Add into array of objects
            Object[] productsTableData = {productId, productName, productType, noOfStocks, unitPrice, packagingType, supplierName};

            //Add productsTableData to the table.
            productsTableModel.addRow(productsTableData);
        }
    }

    //Populate table with suppliers data
    private void populateSupplierComboBoxData() {

        //Initialise Supplier data access object
        supplierDao = new SupplierDAO();

        //Get combobox model
        DefaultComboBoxModel suppliersComboBoxModel = (DefaultComboBoxModel) supplierComboBox.getModel();

        //Get list of supplierss        
        for (Supplier supplierData : supplierDao.getSuppliers()) {

            //Get suppliers data
            String supplierName = supplierData.getSupplierName();

            //Add supplierData to the combo box.
            suppliersComboBoxModel.addElement(supplierName);
        }

    }

    private void populateSupplierTableData() {

        //Initialise Supplier data access object
        supplierDao = new SupplierDAO();

        //Get supplier table Model
        DefaultTableModel supplierTableModel = (DefaultTableModel) supplierTable.getModel();

        //Get list of supplierss        
        for (Supplier supplierData : supplierDao.getSuppliers()) {

            //Get suppliers data
            int supplierId = supplierData.getSupplierId();
            String supplierName = supplierData.getSupplierName(), supplierAddress = supplierData.getSupplierAddress(),
                    contactName = supplierData.getSupplierContactName(), contactNo = supplierData.getSupplierContactNumber();

            Object[] suppliers = {supplierId, supplierName, supplierAddress, contactName, contactNo};

            //Add supplierData to the combo box.
            supplierTableModel.addRow(suppliers);
        }
    }

    //Repopulate data
    private void updateProductTable() {
        //Get TableModel
        DefaultTableModel productsTableModel = (DefaultTableModel) productsTable.getModel();

        //Remove all rows
        for (int row = productsTableModel.getRowCount() - 1; row >= 0; row--) {
            productsTableModel.removeRow(row);
        }

        //Populate again
        populateProductTableData();
    }

    //Repopulate data
    private void updateSupplierComboBox() {
        //Get DefaultComboBoxModel
        DefaultComboBoxModel supplierComboBoxModel = (DefaultComboBoxModel) supplierComboBox.getModel();

        //Remove all rows
        for (int row = supplierComboBoxModel.getSize() - 1; row > 0; row--) {
            supplierComboBoxModel.removeElementAt(row);
        }

        //Populate again
        populateSupplierComboBoxData();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addProductButton;
    private javax.swing.JButton addSupplierButton;
    private javax.swing.JTextField addressField;
    private javax.swing.JLabel addressLabel;
    private javax.swing.JTextField contactNameField;
    private javax.swing.JLabel contactNameLabel;
    private javax.swing.JLabel contactNoLabel;
    private javax.swing.JFormattedTextField contactNumberField;
    private javax.swing.JPanel formPanel;
    private javax.swing.JRadioButton fullRadioButton;
    private javax.swing.JButton modifyProductButton;
    private javax.swing.JButton modifySupplierButton;
    private javax.swing.JFormattedTextField noOfStocksField;
    private javax.swing.JLabel noOfStocksLabel;
    private javax.swing.JComboBox<String> packTypeComboBox;
    private javax.swing.JLabel packTypeLabel;
    private javax.swing.JTextField productNameField;
    private javax.swing.JLabel productNameLabel;
    private javax.swing.JLabel productSupplierNameLabel;
    private javax.swing.ButtonGroup productTypeGroup;
    private javax.swing.JLabel productTypeLabel;
    private javax.swing.JTable productsTable;
    private javax.swing.JScrollPane productsTableScrollPane;
    private javax.swing.JRadioButton rawRadioButton;
    private javax.swing.JButton removeProductButton;
    private javax.swing.JButton removeSupplierButton;
    private javax.swing.JComboBox<String> supplierComboBox;
    private javax.swing.JTextField supplierNameField;
    private javax.swing.JLabel supplierNameLabel;
    private javax.swing.JTable supplierTable;
    private javax.swing.JScrollPane supplierTableScrollPane;
    private javax.swing.JPanel tablesPanel;
    private javax.swing.JFormattedTextField unitPriceField;
    private javax.swing.JLabel unitPriceLabel;
    // End of variables declaration//GEN-END:variables

    //Check for invalid values
    private boolean isValid(String supplierName, String supplierAddress, String contactName, String contactNo) {
        //Check for emptiness and for null values on each Strings
        if (supplierName.isEmpty() && supplierAddress.isEmpty() && contactName.isEmpty() && contactNo.isEmpty()) {

            //Show error message in errorLabel
            JOptionPane.showMessageDialog(this, "One of the fields are empty.", "Empty Fields", JOptionPane.ERROR_MESSAGE);

            return false;
        }
        return true;
    }

    //Repopulate supplier table
    private void updateSupplierTable() {

        //Get TableModel
        DefaultTableModel supplierTableModel = (DefaultTableModel) supplierTable.getModel();

        //Remove all rows
        for (int row = supplierTableModel.getRowCount() - 1; row >= 0; row--) {
            supplierTableModel.removeRow(row);
        }

        //Populate again
        populateSupplierTableData();
    }

}
