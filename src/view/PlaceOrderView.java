package view;

import dao.CustomerDAO;
import dao.EmployeeDAO;
import dao.OrderDAO;
import dao.ProductDAO;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Customer;
import model.Employee;
import model.DetailedOrder;
import model.Order;
import model.Person;
import model.Product;

/**
 *
 * @author Muhammad
 */
public class PlaceOrderView extends javax.swing.JPanel {

    private ProductDAO productDao;
    private CustomerDAO customerDao;
    private EmployeeDAO employeeDao;
    private OrderDAO orderDAO;

    /**
     * Creates new form PlaceOrderView
     */
    public PlaceOrderView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        placeOrderPanel = new javax.swing.JPanel();
        totalLabel = new javax.swing.JLabel();
        quantityLabel = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();
        basketTableScrollPane = new javax.swing.JScrollPane();
        basketTable = new javax.swing.JTable();
        productsTableScrollPane = new javax.swing.JScrollPane();
        productsTable = new javax.swing.JTable();
        totalField = new javax.swing.JFormattedTextField();
        dateLabel = new javax.swing.JLabel();
        dateField = new javax.swing.JFormattedTextField();
        quantityField = new javax.swing.JFormattedTextField();
        addToBasketButton = new javax.swing.JButton();
        createOrderPanel = new javax.swing.JPanel();
        selectedCustomerAddressTextAreaScrollPane = new javax.swing.JScrollPane();
        selectedCustomerAddressTextArea = new javax.swing.JTextArea();
        courierLabel = new javax.swing.JLabel();
        createOrderButton = new javax.swing.JButton();
        courierSelector = new javax.swing.JComboBox<>();
        loggerLabel = new javax.swing.JLabel();
        employeeSelector = new javax.swing.JComboBox<>();
        customerListScrollPane = new javax.swing.JScrollPane();
        customerList = new javax.swing.JList<>();
        placeOrderButton = new javax.swing.JButton();

        totalLabel.setText("Total:");

        quantityLabel.setText("Qty.");

        deleteButton.setText("Delete Item");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        basketTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Id", "Description", "Qty", "Sub-total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        basketTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        basketTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                basketTableMouseClicked(evt);
            }
        });
        basketTableScrollPane.setViewportView(basketTable);
        basketTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (basketTable.getColumnModel().getColumnCount() > 0) {
            basketTable.getColumnModel().getColumn(0).setResizable(false);
            basketTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            basketTable.getColumnModel().getColumn(1).setResizable(false);
            basketTable.getColumnModel().getColumn(2).setResizable(false);
            basketTable.getColumnModel().getColumn(2).setPreferredWidth(15);
            basketTable.getColumnModel().getColumn(3).setResizable(false);
            basketTable.getColumnModel().getColumn(3).setPreferredWidth(15);
        }

        productsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Type", "# of Stocks", "Unit price", "Pack type", "Supplier"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        populateProductsTableData();
        productsTable.setEnabled(false);
        productsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        productsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productsTableMouseClicked(evt);
            }
        });
        productsTableScrollPane.setViewportView(productsTable);
        productsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (productsTable.getColumnModel().getColumnCount() > 0) {
            productsTable.getColumnModel().getColumn(0).setResizable(false);
            productsTable.getColumnModel().getColumn(0).setPreferredWidth(20);
        }

        totalField.setEditable(false);
        totalField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getCurrencyInstance())));

        dateLabel.setText("Date:");

        dateField.setEditable(false);
        dateField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd-MM-yyyy"))));
        dateField.setValue(new Date());

        quantityField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));

        addToBasketButton.setText("Add to Basket");
        addToBasketButton.setEnabled(false);
        addToBasketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToBasketButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout placeOrderPanelLayout = new javax.swing.GroupLayout(placeOrderPanel);
        placeOrderPanel.setLayout(placeOrderPanelLayout);
        placeOrderPanelLayout.setHorizontalGroup(
            placeOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(placeOrderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(placeOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(basketTableScrollPane)
                    .addComponent(productsTableScrollPane)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, placeOrderPanelLayout.createSequentialGroup()
                        .addComponent(addToBasketButton)
                        .addGap(111, 111, 111)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(quantityLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(totalLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        placeOrderPanelLayout.setVerticalGroup(
            placeOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(placeOrderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(productsTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(placeOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalLabel)
                    .addComponent(totalField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateLabel)
                    .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addToBasketButton)
                    .addComponent(deleteButton)
                    .addComponent(quantityLabel)
                    .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(basketTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        selectedCustomerAddressTextArea.setEditable(false);
        selectedCustomerAddressTextArea.setColumns(20);
        selectedCustomerAddressTextArea.setLineWrap(true);
        selectedCustomerAddressTextArea.setRows(5);
        selectedCustomerAddressTextArea.setBorder(javax.swing.BorderFactory.createTitledBorder("Selected Customer's Address"));
        selectedCustomerAddressTextAreaScrollPane.setViewportView(selectedCustomerAddressTextArea);

        courierLabel.setText("Courier:");

        createOrderButton.setText("Create Order");
        createOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createOrderButtonActionPerformed(evt);
            }
        });

        courierSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Courier..." }));
        populateCourierSelectorData();

        loggerLabel.setText("Logger:");

        employeeSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Employee..." }));
        populateEmployeeSelectorData();

        customerList.setModel(new DefaultListModel());
        populateCustomerListData();
        customerList.setBorder(javax.swing.BorderFactory.createTitledBorder("Select a Customer"));
        customerList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        customerList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customerListMouseClicked(evt);
            }
        });
        customerListScrollPane.setViewportView(customerList);

        placeOrderButton.setText("Place Order");
        placeOrderButton.setEnabled(false);
        placeOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placeOrderButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout createOrderPanelLayout = new javax.swing.GroupLayout(createOrderPanel);
        createOrderPanel.setLayout(createOrderPanelLayout);
        createOrderPanelLayout.setHorizontalGroup(
            createOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createOrderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(createOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(customerListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(selectedCustomerAddressTextAreaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGroup(createOrderPanelLayout.createSequentialGroup()
                            .addGroup(createOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(loggerLabel)
                                .addComponent(courierLabel))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(createOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(employeeSelector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(courierSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(createOrderPanelLayout.createSequentialGroup()
                        .addComponent(createOrderButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(placeOrderButton)))
                .addContainerGap())
        );
        createOrderPanelLayout.setVerticalGroup(
            createOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createOrderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(customerListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectedCustomerAddressTextAreaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(createOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loggerLabel)
                    .addComponent(employeeSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(createOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(courierLabel)
                    .addComponent(courierSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(createOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createOrderButton)
                    .addComponent(placeOrderButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createOrderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(placeOrderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(createOrderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(placeOrderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createOrderButtonActionPerformed

        //Get daos
        orderDAO = new OrderDAO();
        customerDao = new CustomerDAO();
        employeeDao = new EmployeeDAO();

        //Get values from selectors and list
        String courierName = courierSelector.getSelectedItem().toString();
        String customerName = customerList.getSelectedValue();
        String employeeName = employeeSelector.getSelectedItem().toString();
        Date currentDate = (Date) dateField.getValue();

        //Represent Order data
        Order order = new Order();
        order.setCustomer((Customer) customerDao.getPersonByName(customerName));
        order.setEmployee((Employee) employeeDao.getPersonByName(employeeName));
        order.setCourierName(courierName);
        order.setOrderDate(currentDate);

        //Perform the createOrder function
        orderDAO.createOrder(order);

        //Disable some swing elements
        courierSelector.setEnabled(false);
        customerList.setEnabled(false);
        employeeSelector.setEnabled(false);
        createOrderButton.setEnabled(false);
        addToBasketButton.setEnabled(true);
        placeOrderButton.setEnabled(true);
        productsTable.setEnabled(true);

    }//GEN-LAST:event_createOrderButtonActionPerformed

    private void addToBasketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToBasketButtonActionPerformed

        //Get basketTable model
        DefaultTableModel basketTableModel = (DefaultTableModel) basketTable.getModel();

        //get selected row from the product table
        int selectedRow = productsTable.getSelectedRow();

        //if nothing is selected from the product table
        if (selectedRow < 0) {
            //Show error message
            JOptionPane.showMessageDialog(this, "You must select a row before adding to basket.", "Missing selection.", JOptionPane.ERROR_MESSAGE);
        } else {

            int productId = Integer.parseInt(productsTable.getValueAt(selectedRow, 0).toString());
            String description = new ProductDAO().getProductsById(productId).toString();
            //Check it quantity field is not null..
            int quantity = 0;
            if (quantityField.getValue() != null) {
                quantity = Integer.parseInt(quantityField.getValue().toString());
            }
            BigDecimal subTotal = new ProductDAO().getProductsById(productId).getPricePerUnit().multiply(new BigDecimal(quantity));

            int duplicateRow = -1;

            //Loop through and find for duplicates in basketTable
            for (int row = 0; row < basketTableModel.getRowCount(); row++) {

                int basketProductId = Integer.parseInt(basketTableModel.getValueAt(row, 0).toString());
                String basketDescription = basketTableModel.getValueAt(row, 1).toString();
                if (basketProductId == productId && basketDescription.equals(description)) {
                    duplicateRow = row;
                    break;
                }

            }

            //if no quantity is set
            if (quantity == 0) {
                JOptionPane.showMessageDialog(this, "You must set a quantity.", "Invalid quantity.", JOptionPane.ERROR_MESSAGE);
            } else {

                int noOfStocks = Integer.parseInt(productsTable.getValueAt(selectedRow, 3).toString());

                //Check if there's more than 1 stock
                if (noOfStocks > 1) {
                    Object[] basketTableData = {productId, description, quantity, subTotal};

                    //If there's no duplicate add to basketTable
                    if (duplicateRow == -1) {
                        basketTableModel.addRow(basketTableData);
                    } else {
                        //Otherwise update the value
                        quantity += Integer.parseInt(basketTableModel.getValueAt(duplicateRow, 2).toString());
                        subTotal = new ProductDAO().getProductsById(productId).getPricePerUnit().multiply(new BigDecimal(quantity));
                        basketTableModel.setValueAt(quantity, duplicateRow, 2);
                        basketTableModel.setValueAt(subTotal, duplicateRow, 3);
                    }
                } else {
                    //Otherwise show out of stock error;
                    JOptionPane.showMessageDialog(this, "Selected Product is out of stock.", "Empty Stock Error.", JOptionPane.ERROR_MESSAGE);
                }

            }
        }

        displayTotal(basketTableModel);

    }//GEN-LAST:event_addToBasketButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        //Get basketTable model
        DefaultTableModel basketTableModel = (DefaultTableModel) basketTable.getModel();

        //get selected row from the product table
        int selectedRow = basketTable.getSelectedRow();

        basketTableModel.removeRow(selectedRow);

        displayTotal(basketTableModel);

    }//GEN-LAST:event_deleteButtonActionPerformed

    private void basketTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_basketTableMouseClicked
        //get selected row from the product table
        int selectedRow = basketTable.getSelectedRow();

        if (selectedRow >= 0) {
            deleteButton.setEnabled(true);
        } else {
            deleteButton.setEnabled(false);
        }
    }//GEN-LAST:event_basketTableMouseClicked

    private void customerListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerListMouseClicked
        customerDao = new CustomerDAO();

        if (customerList.getSelectedIndex() >= 0) {
            String customerName = customerList.getSelectedValue();
            String customerAddress = customerDao.getPersonByName(customerName).getFirstLineAddress();
            selectedCustomerAddressTextArea.setText(customerAddress);
        } else {
            selectedCustomerAddressTextArea.setText("");
        }

    }//GEN-LAST:event_customerListMouseClicked

    private void placeOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placeOrderButtonActionPerformed
        orderDAO = new OrderDAO();
        productDao = new ProductDAO();

        //Get basketTable model
        DefaultTableModel basketTableModel = (DefaultTableModel) basketTable.getModel();

        List<DetailedOrder> orderDetailsList = new ArrayList<>();

        for (int i = 0; i < basketTableModel.getRowCount(); i++) {

            //get the values from basket table
            int productIdFromBasketTable = Integer.parseInt(basketTable.getValueAt(i, 0).toString());
            Product product = productDao.getProductsById(productIdFromBasketTable);
            int quantities = Integer.parseInt(basketTable.getValueAt(i, 2).toString());
            BigDecimal subTotals = new BigDecimal(basketTable.getValueAt(i, 3).toString());
            String descriptions = basketTable.getValueAt(i, 1).toString();

            //Add to list
            orderDetailsList.add(new DetailedOrder(product, quantities, subTotals, descriptions));
            productDao.updateStock(productIdFromBasketTable, quantities);
        }

        BigDecimal total = new BigDecimal(totalField.getValue().toString());

        orderDAO.placeOrder(orderDetailsList, total);
        updateProductTable();
        reset(basketTableModel);
    }//GEN-LAST:event_placeOrderButtonActionPerformed

    private void reset(DefaultTableModel basketTableModel) {
        for (int k = basketTableModel.getRowCount() - 1; k >= 0; k--) {
            basketTableModel.removeRow(k);
        }

        employeeSelector.setEnabled(true);
        courierSelector.setEnabled(true);
        placeOrderButton.setEnabled(false);
        totalField.setText("");
        quantityField.setText("");
        createOrderButton.setEnabled(true);
        customerList.setEnabled(true);
        customerList.clearSelection();
        productsTable.setEnabled(false);
    }


    private void productsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productsTableMouseClicked
        if (productsTable.getSelectedRow() >= 0) {
            addToBasketButton.setEnabled(true);
            quantityField.setValue(1);
        } else {
            quantityField.setValue(0);
            addToBasketButton.setEnabled(false);
        }
    }//GEN-LAST:event_productsTableMouseClicked

    //Calculates the sum of all subtotal and display in totalField
    private void displayTotal(DefaultTableModel basketTableModel) throws NumberFormatException {
        double total = 0.0;
        for (int row = 0; row < basketTableModel.getRowCount(); row++) {

            total += Double.parseDouble(basketTableModel.getValueAt(row, 3).toString());

        }
        totalField.setValue(total);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToBasketButton;
    private javax.swing.JTable basketTable;
    private javax.swing.JScrollPane basketTableScrollPane;
    private javax.swing.JLabel courierLabel;
    private javax.swing.JComboBox<String> courierSelector;
    private javax.swing.JButton createOrderButton;
    private javax.swing.JPanel createOrderPanel;
    private javax.swing.JList<String> customerList;
    private javax.swing.JScrollPane customerListScrollPane;
    private javax.swing.JFormattedTextField dateField;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox<String> employeeSelector;
    private javax.swing.JLabel loggerLabel;
    private javax.swing.JButton placeOrderButton;
    private javax.swing.JPanel placeOrderPanel;
    private javax.swing.JTable productsTable;
    private javax.swing.JScrollPane productsTableScrollPane;
    private javax.swing.JFormattedTextField quantityField;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JTextArea selectedCustomerAddressTextArea;
    private javax.swing.JScrollPane selectedCustomerAddressTextAreaScrollPane;
    private javax.swing.JFormattedTextField totalField;
    private javax.swing.JLabel totalLabel;
    // End of variables declaration//GEN-END:variables

    //Populate table with product data
    private void populateProductsTableData() {
        //Initialise Product data access object
        productDao = new ProductDAO();

        //Get TableModel
        DefaultTableModel productsTableModel = (DefaultTableModel) productsTable.getModel();

        //Get list of products        
        for (Product productData : productDao.getProducts()) {

            //Get product data
            int productId = productData.getProductId(),
                    noOfStocks = productData.getNumberOfStocks();
            String productName = productData.getProductName(),
                    productType = productData.getProductType(),
                    packagingType = productData.getPackagingType();

            BigDecimal unitPrice = productData.getPricePerUnit();

            String supplierName = productData.getSuppliers().getSupplierName();

            //Add into array of objects
            Object[] productsTableData = {productId, productName, productType, noOfStocks, unitPrice, packagingType, supplierName};

            //Add productsTableData to the table.
            productsTableModel.addRow(productsTableData);
        }
    }

    //Populate combobox with customers data
    private void populateCustomerListData() {
        //Initialise Customer data access object
        customerDao = new CustomerDAO();

        //Get combobox model
        DefaultListModel customersListModel = (DefaultListModel) customerList.getModel();

        //Get list of customers        
        for (Person customerData : customerDao.getPersons()) {

            //Get customers data
            String customerName = customerData.getLastName() + ", " + customerData.getFirstName();

            //Add customerData to the combo box.
            customersListModel.addElement(customerName);
        }
    }

    //Populate combo box with employees data
    private void populateEmployeeSelectorData() {
        //Initialise Employee data access object
        employeeDao = new EmployeeDAO();

        //Get combobox model
        DefaultComboBoxModel employeesComboBoxModel = (DefaultComboBoxModel) employeeSelector.getModel();

        //Get list of employees        
        for (Person employeeData : employeeDao.getPersons()) {

            //Get employees data
            String employeeName = employeeData.getLastName() + ", " + employeeData.getFirstName();

            //Add employeeData to the combo box.
            employeesComboBoxModel.addElement(employeeName);
        }
    }

    //Populate combo box with employees data
    private void populateCourierSelectorData() {
        //Initialise Employee data access object
        employeeDao = new EmployeeDAO();

        //Get combobox model
        DefaultComboBoxModel courierComboBoxModel = (DefaultComboBoxModel) courierSelector.getModel();

        //Get list of employees        
        for (Employee employeeData : employeeDao.getCouriers()) {

            //Get employees data
            String employeeName = employeeData.getLastName() + ", " + employeeData.getFirstName();

            //Add employeeData to the combo box.
            courierComboBoxModel.addElement(employeeName);
        }
    }

    private void updateProductTable() {
        //Get TableModel
        DefaultTableModel productsTableModel = (DefaultTableModel) productsTable.getModel();
        for (int i = productsTableModel.getRowCount() - 1; i >= 0; i--) {
            productsTableModel.removeRow(i);
        }

        //Populate table with product data
        populateProductsTableData();
    }
}
